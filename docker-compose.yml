version: '3.7'
services:
  freelanz_db:
    image: mysql:latest
    restart: always
    env_file:
      - ./.env
    ports:
      - '3306:3306'
    volumes:
      - freelanz_db_data:/var/lib/mysql
    networks:
      - app-network
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: '2181'
      ZOOKEEPER_TICK_TIME: '2000'
    networks:
      - app-network
      - kafka-network
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_BROKER_ID: '1'
      # KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      # KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:9092'
      # KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    depends_on:
      - zookeeper
      - freelanz_db
    healthcheck:
      test: ['CMD', 'nc', '-z', 'localhost', '9092']
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - app-network
      - kafka-network
  # redis-node-1:
  #   image: redis:latest
  #   container_name: redis-node-1
  #   command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
  #   ports:
  #     - '6379:6379'
  #   networks:
  #     - redis-cluster-network

  # redis-node-2:
  #   image: redis:latest
  #   container_name: redis-node-2
  #   command: redis-server --port 6380 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
  #   ports:
  #     - '6380:6380'
  #   networks:
  #     - redis-cluster-network

  # redis-node-3:
  #   image: redis:latest
  #   container_name: redis-node-3
  #   command: redis-server --port 6381 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
  #   ports:
  #     - '6381:6381'
  #   networks:
  #     - redis-cluster-network

  # redis-node-4:
  #   image: redis:latest
  #   container_name: redis-node-4
  #   command: redis-server --port 6382 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
  #   ports:
  #     - '6382:6382'
  #   networks:
  #     - redis-cluster-network

  # redis-node-5:
  #   image: redis:latest
  #   container_name: redis-node-5
  #   command: redis-server --port 6383 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
  #   ports:
  #     - '6383:6383'
  #   networks:
  #     - redis-cluster-network

  # redis-node-6:
  #   image: redis:latest
  #   container_name: redis-node-6
  #   command: redis-server --port 6384 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
  #   ports:
  #     - '6384:6384'
  #   networks:
  #     - redis-cluster-network
  # api-gateway:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #   env_file:
  #     - ./.env
  #   ports:
  #     - '3000:3000'
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   command: npm run start:freelanz
  #   depends_on:
  #     - freelanz_db
  #   networks:
  #     - app-network
  #     - kafka-network
  # auth:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #   env_file:
  #     - ./.env
  #   ports:
  #     - '3002:3002'
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   command: npm run start:auth
  #   depends_on:
  #     - api-gateway
  #   networks:
  #     - app-network
  # user:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #   env_file:
  #     - ./.env
  #   ports:
  #     - '3001:3001'
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   command: npm run start:user
  #   depends_on:
  #     - api-gateway
  #   networks:
  #     - app-network
  # job:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #   env_file:
  #     - ./.env
  #   ports:
  #     - '3003:3003'
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   command: npm run start:job
  #   depends_on:
  #     - api-gateway
  #   networks:
  #     - app-network
  # swipe:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #   env_file:
  #     - ./.env
  #   ports:
  #     - '3004:3004'
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   command: npm run start:swipe
  #   depends_on:
  #     - api-gateway
  #   networks:
  #     - app-network
  #     - kafka-network
  # chat:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #   env_file:
  #     - ./.env
  #   ports:
  #     - '3005:3005'
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   command: npm run start:chat
  #   depends_on:
  #     - mongodb
  #   networks:
  #     - app-network

networks:
  app-network:
    driver: bridge
  kafka-network:
    driver: bridge
  redis-cluster-network:
    driver: bridge

volumes:
  kafka-data:
  mongodb_data:
  freelanz_db_data:
    driver: local
