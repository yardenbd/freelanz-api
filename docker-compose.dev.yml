version: '3.7'
services:
  freelanz_db:
    image: mysql:latest
    restart: always
    env_file:
      - ./.env
    ports:
      - '3306:3306'
    volumes:
      - freelanz_db_data:/var/lib/mysql
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: '2181'
      ZOOKEEPER_TICK_TIME: '2000'
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    volumes:
      - kafka-data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    healthcheck:
      test: ['CMD', 'nc', '-z', 'localhost', '9092']
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  # api-gateway:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #   environment:
  #     - NODE_ENV=development
  #   ports:
  #     - '3000:3000'
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   command: ['npm', 'run', 'start:dev', '--', '--project=api-gateway']
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #   networks:
  #     - app-network
  # auth:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #   environment:
  #     - NODE_ENV=development
  #   ports:
  #     - '3002:3000'
  #   volumes:
  #     - .:/usr/src/app
  #     - /usr/src/app/node_modules
  #   command: npm run start:auth
  #   depends_on:
  #     - freelanz_db
  #   networks:
  #     - app-network
  # user:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #   environment:
  #     - NODE_ENV=development
  #   ports:
  #     - '3001:3000'
  #   volumes:
  #     - .:/usr/src/app
  #     - /usr/src/app/node_modules
  #   command: npm run start:user
  #   depends_on:
  #     - freelanz_db
  #   networks:
  #     - app-network
  # job:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #   environment:
  #     - NODE_ENV=development
  #   ports:
  #     - '3003:3000'
  #   volumes:
  #     - .:/usr/src/app
  #     - /usr/src/app/node_modules
  #   command: npm run start:job
  #   depends_on:
  #     - freelanz_db
  #   networks:
  #     - app-network
  # swipe:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #   environment:
  #     - NODE_ENV=development
  #   ports:
  #     - '3004:3000'
  #   volumes:
  #     - .:/usr/src/app
  #     - /usr/src/app/node_modules
  #   command: npm run start:swipe
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #   networks:
  #     - app-network

networks:
  app-network:
    driver: bridge

volumes:
  kafka-data:
  freelanz_db_data:
    driver: local
